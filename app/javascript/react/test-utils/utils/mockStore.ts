import { configureStore } from "@reduxjs/toolkit";

export const createMockStore = () => {
  return configureStore({
    reducer: {
      fixedSessions: () => ({
        points: [],
        list: [],
        status: "idle",
        activeSessions: [],
        dormantSessions: [],
        isActiveSessionsFetched: false,
        isDormantSessionsFetched: false,
        fetchableSessionsCount: 0,
        error: null,
      }),
      mobileSessions: () => ({
        points: [],
        list: [],
        status: "idle",
        sessions: [],
        fetchableSessionsCount: 0,
        error: null,
      }),
      fixedStream: () => ({
        data: {
          measurements: [],
          averageValue: 0,
          endTime: "",
          id: 0,
          maxLatitude: 0,
          maxLongitude: 0,
          minLatitude: 0,
          minLongitude: 0,
          notes: [],
          sensorName: "",
          sensorUnit: "",
          startLatitude: 0,
          startLongitude: 0,
          startTime: "",
          streamId: 0,
          title: "",
          username: "",
        },
        status: "idle",
        error: null,
        isLoading: false,
      }),
      mobileStream: () => ({
        data: {
          measurements: [],
          averageValue: 0,
          endTime: "",
          id: 0,
          maxLatitude: 0,
          maxLongitude: 0,
          minLatitude: 0,
          minLongitude: 0,
          notes: [],
          sensorName: "",
          sensorUnit: "",
          startLatitude: 0,
          startLongitude: 0,
          startTime: "",
          streamId: 0,
          title: "",
          username: "",
        },
        minMeasurementValue: 0,
        maxMeasurementValue: 0,
        averageMeasurementValue: 0,
        status: "idle",
        error: null,
        isLoading: false,
        lastSelectedTimeRange: "all",
      }),
      timelapse: () => ({
        data: {},
        status: "idle",
        currentTimestamp: "",
        isLoading: false,
      }),
      map: () => ({
        fetchingData: false,
        hoverStreamId: null,
        hoverPosition: null,
        sessionsListExpanded: true,
      }),
      markersLoading: () => ({ loading: false }),
      sessionFilter: () => ({
        type: "fixed",
        isDormant: false,
        tags: [],
        fixedSessionsType: "active",
      }),
      threshold: () => ({
        defaultValues: { min: 0, low: 25, middle: 50, high: 75, max: 100 },
        userValues: { min: 0, low: 25, middle: 50, high: 75, max: 100 },
        status: "idle",
        error: null,
        sliderWidth: 0,
        thumbPositions: { low: 0, middle: 50, high: 100 },
        errorMessage: "",
        isThresholdsSet: true,
        isDefaultThresholdsSet: true,
      }),
      crowdMap: () => ({
        status: "idle",
        rectangles: [],
        fetchingData: false,
      }),
      realtimeMapUpdates: () => ({ realtimeMapUpdates: false }),
      cluster: () => ({
        visible: false,
        clusterAverage: 0,
        clusterSize: 0,
      }),
      indoorSessions: () => ({
        sessions: [],
        status: "idle",
        error: null,
      }),
      sensors: () => ({
        data: [],
        status: "idle",
        error: null,
      }),
      loading: () => ({
        fixedSessions: false,
        mobileSessions: false,
        fixedStream: false,
        mobileStream: false,
        timelapse: false,
        crowdMap: false,
        indoorSessions: false,
      }),
      mapParams: () => ({
        isIndoor: true,
        currentUserSettings: "MapView",
        sessionType: "fixed",
        isActive: true,
      }),
    },
    middleware: (getDefaultMiddleware) =>
      getDefaultMiddleware({
        serializableCheck: false,
        immutableCheck: false,
      }),
  });
};
